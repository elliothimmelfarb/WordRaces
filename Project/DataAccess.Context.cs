//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WordRaces
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DWKDBEntities : DbContext
    {
        public DWKDBEntities()
            : base("name=DWKDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int AddLegalWord(string legalWord)
        {
            var legalWordParameter = legalWord != null ?
                new ObjectParameter("LegalWord", legalWord) :
                new ObjectParameter("LegalWord", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddLegalWord", legalWordParameter);
        }
    
        public virtual ObjectResult<AddPlayer_Result> AddPlayer(string moniker)
        {
            var monikerParameter = moniker != null ?
                new ObjectParameter("Moniker", moniker) :
                new ObjectParameter("Moniker", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddPlayer_Result>("AddPlayer", monikerParameter);
        }
    
        public virtual ObjectResult<GetPlayer_Result> GetPlayer(string playerGuidChar)
        {
            var playerGuidCharParameter = playerGuidChar != null ?
                new ObjectParameter("PlayerGuidChar", playerGuidChar) :
                new ObjectParameter("PlayerGuidChar", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPlayer_Result>("GetPlayer", playerGuidCharParameter);
        }
    
        public virtual ObjectResult<FindWords_Result> FindWords(string board)
        {
            var boardParameter = board != null ?
                new ObjectParameter("Board", board) :
                new ObjectParameter("Board", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindWords_Result>("FindWords", boardParameter);
        }
    
        public virtual ObjectResult<GetBoard_Result> GetBoard(Nullable<int> gamePlayerID)
        {
            var gamePlayerIDParameter = gamePlayerID.HasValue ?
                new ObjectParameter("GamePlayerID", gamePlayerID) :
                new ObjectParameter("GamePlayerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBoard_Result>("GetBoard", gamePlayerIDParameter);
        }
    
        public virtual ObjectResult<GameOver_Result> GameOver(Nullable<int> gameID, Nullable<int> playerID, Nullable<long> gameTimeMilli, string completedBoard)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var playerIDParameter = playerID.HasValue ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(int));
    
            var gameTimeMilliParameter = gameTimeMilli.HasValue ?
                new ObjectParameter("GameTimeMilli", gameTimeMilli) :
                new ObjectParameter("GameTimeMilli", typeof(long));
    
            var completedBoardParameter = completedBoard != null ?
                new ObjectParameter("CompletedBoard", completedBoard) :
                new ObjectParameter("CompletedBoard", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GameOver_Result>("GameOver", gameIDParameter, playerIDParameter, gameTimeMilliParameter, completedBoardParameter);
        }
    
        public virtual ObjectResult<GetGamesByPlayerID_Result> GetGamesByPlayerID(Nullable<int> playerID)
        {
            var playerIDParameter = playerID.HasValue ?
                new ObjectParameter("PlayerID", playerID) :
                new ObjectParameter("PlayerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGamesByPlayerID_Result>("GetGamesByPlayerID", playerIDParameter);
        }
    }
}
